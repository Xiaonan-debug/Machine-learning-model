============================= test session starts ==============================
platform linux -- Python 3.9.15, pytest-7.2.0, pluggy-1.0.0
rootdir: /workspace
collected 17 items
tests/test_a_environment.py .                                            [  5%]
tests/test_a_setup.py .                                                  [ 11%]
tests/test_custom_transform.py F                                         [ 17%]
tests/test_loss.py FF                                                    [ 29%]
tests/test_model.py FFFF                                                 [ 52%]
tests/test_perceptron.py FF                                              [ 64%]
tests/test_regularization.py FFF                                         [ 82%]
tests/test_relu.py .FF                                                   [100%]
=================================== FAILURES ===================================
____________________________ test_custom_transform _____________________________
>       new_X = custom_transform(X)
tests/test_custom_transform.py:11:
>       raise NotImplementedError
E       NotImplementedError
src/data_transform.py:22: NotImplementedError
___________________________ test_squared_loss_basics ___________________________
>       assert loss.forward(A, B) == mean_squared_error(A, B)
E       assert 78.0 == 156.0
E        +  where 78.0 = <bound method SquaredLoss.forward of <src.loss.SquaredLoss object at 0x7f4f20623dc0>>(array([[ 1],\n       [ 2],\n       [ 3],\n       [ 4],\n       [ 5],\n       [ 6],\n       [ 7],\n       [ 8],\n       [ 9],\n ...,\n       [11],\n       [12],\n       [13],\n       [14],\n       [15],\n       [16],\n       [17],\n       [18],\n       [19]]), array([[25],\n       [24],\n       [23],\n       [22],\n       [21],\n       [20],\n       [19],\n       [18],\n       [17],\n ...,\n       [15],\n       [14],\n       [13],\n       [12],\n       [11],\n       [10],\n       [ 9],\n       [ 8],\n       [ 7]]))
E        +    where <bound method SquaredLoss.forward of <src.loss.SquaredLoss object at 0x7f4f20623dc0>> = <src.loss.SquaredLoss object at 0x7f4f20623dc0>.forward
E        +  and   156.0 = <function mean_squared_error at 0x7f4e3fda9ca0>(array([[ 1],\n       [ 2],\n       [ 3],\n       [ 4],\n       [ 5],\n       [ 6],\n       [ 7],\n       [ 8],\n       [ 9],\n ...,\n       [11],\n       [12],\n       [13],\n       [14],\n       [15],\n       [16],\n       [17],\n       [18],\n       [19]]), array([[25],\n       [24],\n       [23],\n       [22],\n       [21],\n       [20],\n       [19],\n       [18],\n       [17],\n ...,\n       [15],\n       [14],\n       [13],\n       [12],\n       [11],\n       [10],\n       [ 9],\n       [ 8],\n       [ 7]]))
tests/test_loss.py:18: AssertionError
____________________________ test_squared_loss_fit _____________________________
>       pred_before = model.forward(X)
tests/test_loss.py:48:
>       return X.dot(self.weights)
E       ValueError: shapes (10,2) and (5,1) not aligned: 2 (dim 1) != 5 (dim 0)
src/layers.py:98: ValueError
______________________________ test_model_forward ______________________________
>       assert np.all(np.isclose(pred, target))
E       assert False
E        +  where False = <function all at 0x7f4eab487700>(array([[False],\n       [False],\n       [False],\n       [False]]))
E        +    where <function all at 0x7f4eab487700> = np.all
E        +    and   array([[False],\n       [False],\n       [False],\n       [False]]) = <function isclose at 0x7f4eab49c040>(array([[3.],\n       [1.],\n       [2.],\n       [0.]]), array([[2.99728059],\n       [2.84482466],\n       [2.97706854],\n       [1.96211716]]))
E        +      where <function isclose at 0x7f4eab49c040> = np.isclose
tests/test_model.py:27: AssertionError
_____________________________ test_model_backward ______________________________
>           model.backward(0.5 * np.ones_like(y), y)
tests/test_model.py:51:
>       batch_size, output_dim2 = grad.shape
E       ValueError: not enough values to unpack (expected 2, got 0)
src/layers.py:115: ValueError
______________________________ test_model_fit_xor ______________________________
>       pred_before = model.forward(X)
tests/test_model.py:93:
>       return X.dot(self.weights)
E       ValueError: shapes (4,3) and (9,1) not aligned: 3 (dim 1) != 9 (dim 0)
src/layers.py:98: ValueError
____________________________ test_model_fit_circles ____________________________
>       accuracy_before = accuracy_score(model.predict(X) > 0.5, y)
tests/test_model.py:147:
>       return X.dot(self.weights)
E       ValueError: shapes (100,3) and (9,1) not aligned: 3 (dim 1) != 9 (dim 0)
src/layers.py:98: ValueError
_______________________________ test_perceptron ________________________________
>       num_iter = p.fit(features, targets)
tests/test_perceptron.py:11:
>       raise NotImplementedError
E       NotImplementedError
src/perceptron.py:86: NotImplementedError
__________________________ test_polynomial_perceptron __________________________
>       num_iter = p.fit(features, targets)
tests/test_perceptron.py:27:
>       raise NotImplementedError
E       NotImplementedError
src/perceptron.py:86: NotImplementedError
________________________________ test_l1_basics ________________________________
>       grad = regularizer.grad(X)
tests/test_regularization.py:18:
>       raise NotImplementedError
E       NotImplementedError
src/regularization.py:36: NotImplementedError
________________________________ test_l2_basics ________________________________
>       grad = regularizer.grad(X)
tests/test_regularization.py:39:
>       raise NotImplementedError
E       NotImplementedError
src/regularization.py:49: NotImplementedError
_______________________ test_regularization_fit_circles ________________________
>           assert mean < prev_mean, f"L2 reg with alpha={alpha}"
E           AssertionError: L2 reg with alpha=0.001
E           assert 0.36307813048432724 < 0.36307813048432724
tests/test_regularization.py:81: AssertionError
______________________________ test_relu_fit_xor _______________________________
>       pred_before = model.forward(X)
tests/test_relu.py:47:
>       return X.dot(self.weights)
E       ValueError: shapes (4,3) and (9,1) not aligned: 3 (dim 1) != 9 (dim 0)
src/layers.py:98: ValueError
____________________________ test_relu_fit_circles _____________________________
>       accuracy_after = accuracy_score(model.predict(X) > 0.5, y)
tests/test_relu.py:75:
>       return X.dot(self.weights)
E       ValueError: shapes (100,3) and (9,1) not aligned: 3 (dim 1) != 9 (dim 0)
src/layers.py:98: ValueError
=========================== short test summary info ============================
FAILED tests/test_custom_transform.py::test_custom_transform - NotImplemented...
FAILED tests/test_loss.py::test_squared_loss_basics - assert 78.0 == 156.0
FAILED tests/test_loss.py::test_squared_loss_fit - ValueError: shapes (10,2) ...
FAILED tests/test_model.py::test_model_forward - assert False
FAILED tests/test_model.py::test_model_backward - ValueError: not enough valu...
FAILED tests/test_model.py::test_model_fit_xor - ValueError: shapes (4,3) and...
FAILED tests/test_model.py::test_model_fit_circles - ValueError: shapes (100,...
FAILED tests/test_perceptron.py::test_perceptron - NotImplementedError
FAILED tests/test_perceptron.py::test_polynomial_perceptron - NotImplementedE...
FAILED tests/test_regularization.py::test_l1_basics - NotImplementedError
FAILED tests/test_regularization.py::test_l2_basics - NotImplementedError
FAILED tests/test_regularization.py::test_regularization_fit_circles - Assert...
FAILED tests/test_relu.py::test_relu_fit_xor - ValueError: shapes (4,3) and (...
FAILED tests/test_relu.py::test_relu_fit_circles - ValueError: shapes (100,3)...
========================= 14 failed, 3 passed in 1.34s =========================